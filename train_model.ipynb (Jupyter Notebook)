import os
import numpy as np
from sklearn.model_selection import train_test_split
from keras.utils import to_categorical
from keras.models import Sequential
from keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPooling2D
from features_extraction import extract_features
import librosa.display

# Define dataset path and emotions
DATA_PATH = 'data/'
EMOTIONS = ['neutral', 'happy', 'sad', 'angry']  # Limit for simplicity

X, y = [], []

# Load and extract features
for emotion in EMOTIONS:
    folder = os.path.join(DATA_PATH, emotion)
    for file in os.listdir(folder):
        if file.endswith('.wav'):
            feature = extract_features(os.path.join(folder, file))
            if feature is not None:
                X.append(feature)
                y.append(EMOTIONS.index(emotion))

# Reshape and normalize
X = np.array(X)
X = X.reshape(X.shape[0], 40, 174, 1)
y = to_categorical(np.array(y))

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# CNN Model
model = Sequential()
model.add(Conv2D(32, kernel_size=(3,3), activation='relu', input_shape=(40,174,1)))
model.add(MaxPooling2D(pool_size=(2,2)))
model.add(Dropout(0.25))

model.add(Conv2D(64, kernel_size=(3,3), activation='relu'))
model.add(MaxPooling2D(pool_size=(2,2)))
model.add(Dropout(0.3))

model.add(Flatten())
model.add(Dense(128, activation='relu'))
model.add(Dropout(0.3))
model.add(Dense(len(EMOTIONS), activation='softmax'))

model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])
model.fit(X_train, y_train, epochs=30, batch_size=32, validation_data=(X_test, y_test))

# Save the model
model.save('model/emotion_model.h5')
